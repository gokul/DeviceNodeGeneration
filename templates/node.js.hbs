"use strict";
let coap = require('coap');
let request = require('request');

function isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}

let serviceCallHttp = function (node, flowRequestOpts) {

    request(flowRequestOpts, function (error, response, body) {
        node.status({});

        if(response !== undefined){
            let status = response.statusCode.toString();

            if (error || status === '500' || status === '404' || status === '401' || status === '403') {
                node.log('Response error');
                node.status({
                    fill:"orange",
                    shape:"ring",
                    text:"Response error"
                });

            } else {
                node.send({payload:response.body});
            }
        }
        else {
            node.log('Response error');
            node.status({
                fill:"orange",
                shape:"ring",
                text:"Response error"
            });

        }
    });
};

let serviceCallCOAP = function(node, requestInfo, payload){
    let source1 = "";

    let req1 = coap.request(requestInfo);
    if(payload !== undefined){
        req1.write(JSON.stringify(payload));
    }
    req1.on('error', function(err) {
        node.log('Error occurred while sending request '+ err.toString());
        node.status({
            fill:"orange",
            shape:"red",
            text:"Error occurred " + err.toString()
        });
    });
    req1.on('response', function(res) {
        try {
            source1 = res.read().toString();
            node.send({payload:source1});
        }catch(err){
            if(config.method === "GET"){
            	node.log(err.toString());
            	node.status({
               	 fill:"red",
                	shape:"ring",
                	text: err.toString()
           	 });
            }
        }
        res.on('end', function() {});
    });
    req1.end();
};

module.exports = function(RED) {

    function {{node_name}}(config) {
        RED.nodes.createNode(this, config);
        let node = this;
        node.status({});
        {{#is_equal this.type "property"}}

        //Validating provided method for service request
        if(!config.method) {
            node.status({
                fill:"orange",
                shape:"ring",
                text:"Not deployed due to undefined method"
            })
        }
        else if(config.method === "GET" && !config.interval) {
            node.status({
                fill:"orange",
                shape:"ring",
                text:"Not deployed due to undefined interval"
            });
        }
        else if(config.method === "GET" && !isNumeric(config.interval)) {
            node.status({
                fill:"orange",
                shape:"ring",
                text:"Not deployed due to invalid interval"
            });
        }
        else  if (config.method === "GET"){
            this.interval_id = null;
            {{#is_equal this.protocol "coap"}}
                let requestInfo = {hostname: "{{hostname}}", pathname : "{{path}}", method : config.method};
                this.interval_id = setInterval(function() { serviceCallCOAP(node, requestInfo); }, config.interval * 1000);
                process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
                serviceCallCOAP(node, requestInfo, undefined);
            {{/is_equal}}

            {{#is_equal this.protocol "https"}}
                var auth = "{{securitySchemeName}} " {{#is_equal this.securityScheme "basic"}}+ Buffer.from(config.username + ':' + config.password).toString('base64'){{/is_equal}}{{#is_equal this.securityScheme "Bearer"}} + config.auth{{/is_equal}};
                let requestOpts = {
                    method: config.method,
                    url: "{{url}}",
                    encoding: null,
		    json: true,
                    headers:{
                        "Authorization" : auth
                    }
                };
                this.interval_id = setInterval(function() { serviceCallHttp(node, requestOpts); }, config.interval * 1000);
                process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
                serviceCallHttp(node, requestOpts);
             {{/is_equal}}

                 this.on("close", function() {
                    if (this.interval_id != null) {
                        clearInterval(this.interval_id);
                        }
                    });
                }
             {{/is_equal}}

             {{#is_equal this.type "action"}}
                node.on('input', function(msg) {
                    let source = "";
                    let output;
                    let msgPayload = msg.payload;
                    // Validating request method
                    if(!config.method) {
                        node.status({
                            fill:"orange",
                            shape:"ring",
                            text:"Not deployed due to undefined method"
                         });
                    }
                    else{
                     {{#is_equal this.protocol "coap"}}
                        let requestInfo = {hostname: "{{hostname}}", pathname : "{{path}}", method : config.method};
                        serviceCallCOAP(node, requestInfo, msgPayload);
                     {{/is_equal}}

                      {{#is_equal this.protocol "https"}}
                      var auth = "{{securitySchemeName}} " {{#is_equal this.securityScheme "basic"}}+ Buffer.from(config.username + ':' + config.password).toString('base64'){{/is_equal}}{{#is_equal this.securityScheme "Bearer"}} + config.auth{{/is_equal}};
                                    let requestOpts = {
                                        method: config.method,
                                        url: "{{url}}",
                                        encoding: null,
                                        body: msgPayload,
					json: true,
                                        headers:{
                                            "Authorization" : auth
                                        }

                                    };
                                    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
                                    serviceCallHttp(node, requestOpts);
                                    {{/is_equal}}
                                    }
                                    });
                        {{/is_equal}}

                            {{#is_equal this.type "property"}}{{#is_equal writable true}}
                            node.on('input', function(msg) {
                                let source = "";
                                let output;
                                // Validating request method
                                if(!config.method) {
                                    node.status({
                                        fill:"orange",
                                        shape:"ring",
                                        text:"Not deployed due to undefined method"
                                    });
                                }
                                else{
                                    {{#is_equal this.protocol "coap"}}
                                    let requestInfo = {hostname: "{{hostname}}", pathname : "{{path}}", method : config.method};
                                    serviceCallCOAP(node, requestInfo);
                                    {{/is_equal}}


                                        {{#is_equal this.protocol "https"}}
                                        var auth = "{{securitySchemeName}} " {{#is_equal this.securityScheme "basic"}}+ Buffer.from(config.username + ':' + config.password).toString('base64'){{/is_equal}}{{#is_equal this.securityScheme "Bearer"}} + config.auth{{/is_equal}};
                                        let requestOpts = {
                                            method: config.method,
                                            url: "{{url}}",
                                            encoding: null,
					    json: true,
                                            headers:{
                                                "Authorization" : auth
                                            }
                                        };
                                        process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
                                        serviceCallHttp(node, requestOpts);
                                        {{/is_equal}}
                                        }
                                        });{{/is_equal}}{{/is_equal}}
                        }

                        RED.nodes.registerType("{{node_name}}", {{node_name}});
                    };
